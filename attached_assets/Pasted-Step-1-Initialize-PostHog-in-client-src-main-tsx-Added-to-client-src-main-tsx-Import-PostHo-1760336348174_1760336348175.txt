Step 1: Initialize PostHog in client/src/main.tsx
Added to client/src/main.tsx:

// Import PostHog
import posthog from "posthog-js";
import { PostHogProvider } from "posthog-js/react";
// Initialize PostHog with API key and host
const POSTHOG_KEY = import.meta.env.VITE_POSTHOG_KEY || "phc_rwjZUYs5cDOK2dxkP8NvSly1sFX45CnioeuE240BVEx";
const POSTHOG_HOST = import.meta.env.VITE_POSTHOG_HOST || "https://us.i.posthog.com";
posthog.init(POSTHOG_KEY, {
  api_host: POSTHOG_HOST,
  person_profiles: 'identified_only',
  capture_pageview: false, // Disable auto pageview, we track manually
  autocapture: true,
  session_recording: {
    maskAllInputs: true,
    maskTextSelector: '[data-private]'
  }
});
// Wrap app with PostHogProvider
<PostHogProvider client={posthog}>
  <ThemeProvider>
    <App />
  </ThemeProvider>
</PostHogProvider>
Step 2: Create Page Tracker Component
Created client/src/components/PostHogPageTracker.tsx:

import { useEffect } from "react";
import { useLocation } from "wouter";
import { usePostHog } from "posthog-js/react";
export default function PostHogPageTracker() {
  const [location] = useLocation();  // Get current route from wouter
  const posthog = usePostHog();      // Get PostHog instance
  useEffect(() => {
    if (posthog) {
      posthog.capture("$pageview", {  // Send pageview event
        $current_url: window.location.href,
        path: location
      });
    }
  }, [location, posthog]);  // Trigger when location changes
  return null;  // This component doesn't render anything
}
Step 3: Add User Identification in client/src/lib/auth.ts
Added import:

import posthog from "posthog-js";
When user is authenticated (checkAuth):

// After successful auth check
if (posthog && userData.id) {
  posthog.identify(userData.id.toString(), {
    email: userData.email,
    username: userData.username,
    name: userData.name,
    role: userData.role
  });
}
When user logs in:

// After successful login
if (posthog && userData.id) {
  posthog.identify(userData.id.toString(), {
    email: userData.email,
    username: userData.username,
    name: userData.name,
    role: userData.role
  });
  posthog.capture("user_login", {
    method: isMobileLogin ? "mobile" : "web"
  });
}
When user registers:

// After successful registration
if (posthog && userData.id) {
  posthog.identify(userData.id.toString(), {
    email: userData.email,
    username: userData.username,
    name: userData.name,
    role: userData.role
  });
  posthog.capture("user_registered", {
    role: userData.role,
    isInvitation: data.isInvitation || false
  });
}